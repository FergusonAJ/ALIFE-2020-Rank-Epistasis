sigma_inv = MASS::ginv(sigma)
tmp = sigma_inv %*% mu
return(t(tmp) %*% x)
}
x = c(1.2, 1.2, 1.2)
g_first(x, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_first(x, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
library(ggplot2)
x_vec = seq(0,3, by = 0.05)
y_vec = seq(0,3, by = 0.05)
z_vec = c(1)#seq(0,3, by = 0.3)
data = data.frame(data = matrix(nrow = length(x_vec) * length(y_vec) * length(z_vec), ncol = 6))
cur_row = 1
print(paste0('Calculating ', nrow(data), ' points!'))
for (x in x_vec){
for (y in y_vec){
for (z in z_vec){
p = c(x, y, z)
g_1 = g_first(p, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_2 = g_first(p, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
data[cur_row,] = c(x, y, z, g_1, g_2, g_1 > g_2)
cur_row = cur_row + 1
}
}
}
colnames(data) = c('x', 'y', 'z', 'g_1', 'g_2', 'is_c1')
ggplot(data, aes(x = x, y = y, fill = is_c1)) +
geom_tile() +
geom_point(aes(x = 1, y = 1), color = 2, size = 3) +
geom_point(aes(x = 2, y = 2), color = 2, size = 3)
rm(list = ls())
library(MASS)
mu = c(1,1,1)
sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0,0,5,2,0,2,5))
x = c(5,5,5)
mv
mahalanobis(x = x, center = mu, cov = sigma)
sigma_inv = matrix(nrow = 3, ncol = 3, data = c(1, 0, 0, 0, 5/21, -2/21, 0, -2/21, 5/21))
mahalanobis(x = x, center = mu, cov = sigma_inv, inverted = T)
identity_mat = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
mahalanobis(x = x, center = mu, cov = identity_mat)
mu_1 = c(1,1,1)
mu_2 = c(2,2,1)
sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,5,2, 0,2,5))
#sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
get_diff = function(sigma, mu_1, mu_2){
sigma_inv = MASS::ginv(sigma)
first_term = t(sigma_inv %*% (mu_1 - mu_2)) %*% mu_1
second_term = (-1/2) * (t(mu_1) %*% sigma_inv %*% mu_1 - t(mu_2) %*% sigma_inv %*% mu_2)
return(first_term + second_term)
}
p_vec = c(exp(get_diff(sigma, mu_1, mu_2)), 1)
p_vec = p_vec / sum(p_vec)
print(p_vec)
p_1 = p_vec[1]
p_2 = p_vec[2]
g_mid = function(mu, sigma){
sigma_inv = MASS::ginv(sigma)
return((-1/2) * (t(mu) %*% sigma_inv %*% mu))
}
g_mid(mu_1, sigma)
g_mid(mu_2, sigma)
g_first = function(x, mu, sigma){
sigma_inv = MASS::ginv(sigma)
tmp = sigma_inv %*% mu
return(t(tmp) %*% x)
}
x = c(1.2, 1.2, 1.2)
g_first(x, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_first(x, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
library(ggplot2)
x_vec = seq(0,3, by = 0.05)
y_vec = seq(0,3, by = 0.05)
z_vec = c(1)#seq(0,3, by = 0.3)
data = data.frame(data = matrix(nrow = length(x_vec) * length(y_vec) * length(z_vec), ncol = 6))
cur_row = 1
print(paste0('Calculating ', nrow(data), ' points!'))
for (x in x_vec){
for (y in y_vec){
for (z in z_vec){
p = c(x, y, z)
g_1 = g_first(p, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_2 = g_first(p, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
data[cur_row,] = c(x, y, z, g_1, g_2, g_1 > g_2)
cur_row = cur_row + 1
}
}
}
colnames(data) = c('x', 'y', 'z', 'g_1', 'g_2', 'is_c1')
ggplot(data, aes(x = x, y = y, fill = is_c1)) +
geom_tile() +
geom_point(aes(x = 1, y = 1), color = 2, size = 3) +
geom_point(aes(x = 2, y = 2), color = 2, size = 3)
rm(list = ls())
library(MASS)
mu = c(1,1,1)
sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0,0,5,2,0,2,5))
x = c(5,5,5)
mv
mahalanobis(x = x, center = mu, cov = sigma)
sigma_inv = matrix(nrow = 3, ncol = 3, data = c(1, 0, 0, 0, 5/21, -2/21, 0, -2/21, 5/21))
mahalanobis(x = x, center = mu, cov = sigma_inv, inverted = T)
identity_mat = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
mahalanobis(x = x, center = mu, cov = identity_mat)
mu_1 = c(1,1,1)
mu_2 = c(2,2,1)
#sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,5,2, 0,2,5))
#sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
sigma = matrix(nrow = 3, ncol = 3, data = c(7,2,0, 2,5,2, 0,2,5))
get_diff = function(sigma, mu_1, mu_2){
sigma_inv = MASS::ginv(sigma)
first_term = t(sigma_inv %*% (mu_1 - mu_2)) %*% mu_1
second_term = (-1/2) * (t(mu_1) %*% sigma_inv %*% mu_1 - t(mu_2) %*% sigma_inv %*% mu_2)
return(first_term + second_term)
}
p_vec = c(exp(get_diff(sigma, mu_1, mu_2)), 1)
p_vec = p_vec / sum(p_vec)
print(p_vec)
p_1 = p_vec[1]
p_2 = p_vec[2]
g_mid = function(mu, sigma){
sigma_inv = MASS::ginv(sigma)
return((-1/2) * (t(mu) %*% sigma_inv %*% mu))
}
g_mid(mu_1, sigma)
g_mid(mu_2, sigma)
g_first = function(x, mu, sigma){
sigma_inv = MASS::ginv(sigma)
tmp = sigma_inv %*% mu
return(t(tmp) %*% x)
}
x = c(1.2, 1.2, 1.2)
g_first(x, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_first(x, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
library(ggplot2)
x_vec = seq(0,3, by = 0.05)
y_vec = seq(0,3, by = 0.05)
z_vec = c(1)#seq(0,3, by = 0.3)
data = data.frame(data = matrix(nrow = length(x_vec) * length(y_vec) * length(z_vec), ncol = 6))
cur_row = 1
print(paste0('Calculating ', nrow(data), ' points!'))
for (x in x_vec){
for (y in y_vec){
for (z in z_vec){
p = c(x, y, z)
g_1 = g_first(p, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_2 = g_first(p, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
data[cur_row,] = c(x, y, z, g_1, g_2, g_1 > g_2)
cur_row = cur_row + 1
}
}
}
colnames(data) = c('x', 'y', 'z', 'g_1', 'g_2', 'is_c1')
ggplot(data, aes(x = x, y = y, fill = is_c1)) +
geom_tile() +
geom_point(aes(x = 1, y = 1), color = 2, size = 3) +
geom_point(aes(x = 2, y = 2), color = 2, size = 3)
rm(list = ls())
library(MASS)
mu = c(1,1,1)
sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0,0,5,2,0,2,5))
x = c(5,5,5)
mv
mahalanobis(x = x, center = mu, cov = sigma)
sigma_inv = matrix(nrow = 3, ncol = 3, data = c(1, 0, 0, 0, 5/21, -2/21, 0, -2/21, 5/21))
mahalanobis(x = x, center = mu, cov = sigma_inv, inverted = T)
identity_mat = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
mahalanobis(x = x, center = mu, cov = identity_mat)
mu_1 = c(1,1,1)
mu_2 = c(2,2,1)
#sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,5,2, 0,2,5))
#sigma = matrix(nrow = 3, ncol = 3, data = c(1,0,0, 0,1,0, 0,0,1))
sigma = matrix(nrow = 3, ncol = 3, data = c(7,2,0, 2,5,2, 0,2,5))
get_diff = function(sigma, mu_1, mu_2){
sigma_inv = MASS::ginv(sigma)
first_term = t(sigma_inv %*% (mu_1 - mu_2)) %*% mu_1
second_term = (-1/2) * (t(mu_1) %*% sigma_inv %*% mu_1 - t(mu_2) %*% sigma_inv %*% mu_2)
return(first_term + second_term)
}
p_vec = c(exp(get_diff(sigma, mu_1, mu_2)), 1)
p_vec = p_vec / sum(p_vec)
print(p_vec)
p_1 = p_vec[1]
p_2 = p_vec[2]
g_mid = function(mu, sigma){
sigma_inv = MASS::ginv(sigma)
return((-1/2) * (t(mu) %*% sigma_inv %*% mu))
}
g_mid(mu_1, sigma)
g_mid(mu_2, sigma)
g_first = function(x, mu, sigma){
sigma_inv = MASS::ginv(sigma)
tmp = sigma_inv %*% mu
return(t(tmp) %*% x)
}
x = c(1.2, 1.2, 1.2)
g_first(x, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_first(x, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
library(ggplot2)
x_vec = seq(0,3, by = 0.02)
y_vec = seq(0,3, by = 0.02)
z_vec = c(1)#seq(0,3, by = 0.3)
data = data.frame(data = matrix(nrow = length(x_vec) * length(y_vec) * length(z_vec), ncol = 6))
cur_row = 1
print(paste0('Calculating ', nrow(data), ' points!'))
for (x in x_vec){
for (y in y_vec){
for (z in z_vec){
p = c(x, y, z)
g_1 = g_first(p, mu_1, sigma) + g_mid(mu_1, sigma) + log(p_1)
g_2 = g_first(p, mu_2, sigma) + g_mid(mu_2, sigma) + log(p_2)
data[cur_row,] = c(x, y, z, g_1, g_2, g_1 > g_2)
cur_row = cur_row + 1
}
}
}
colnames(data) = c('x', 'y', 'z', 'g_1', 'g_2', 'is_c1')
ggplot(data, aes(x = x, y = y, fill = is_c1)) +
geom_tile() +
geom_point(aes(x = 1, y = 1), color = 2, size = 3) +
geom_point(aes(x = 2, y = 2), color = 2, size = 3)
###################################
####            FIT            ####
###################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data = read.csv('edit_distance_fit.csv')
data$locus = as.numeric(data$locus)
data$gen = as.numeric(data$gen)
data$edit_distance = as.numeric(data$edit_distance)
ggplot(data[data$gen < 10,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen))
ggplot(data[data$locus < 10,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus))
ggplot(data[data$gen > 495,], aes(x = edit_distance)) +
geom_histogram(binwidth = 1) +
facet_grid(rows = vars(gen))
ggplot(data[data$locus < 10,], aes(x = gen, y = edit_distance, color = locus)) +
geom_point()
ggplot(data, aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_fit.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data, aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_fit.pdf', units = 'in', width = 20, height = 200, limitsize = F)
ggplot(data[data$locus == 1,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_1_fit.pdf', units = 'in', width = 20, height = 200, limitsize = F)
ggplot(data[data$locus == 1,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_1_fit.pdf', units = 'in', width = 20, height = 4, limitsize = F)
ggplot(data[data$locus == 1,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_1_fit.pdf', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$locus == 1,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_1_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$locus == 155,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_155_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$locus == 116,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_116_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
###################################
####            FLAT           ####
###################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data = read.csv('edit_distance_flat.csv')
data$locus = as.numeric(data$locus)
data$gen = as.numeric(data$gen)
data$edit_distance = as.numeric(data$edit_distance)
ggplot(data[data$gen < 10,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen))
ggplot(data[data$locus > 195,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus))
ggplot(data[data$gen > 490,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen))
ggplot(data[data$gen > 495,], aes(x = edit_distance)) +
geom_histogram(binwidth = 1) +
facet_grid(rows = vars(gen))
ggplot(data[data$locus < 10,], aes(x = gen, y = edit_distance, color = locus)) +
geom_point()
ggplot(data, aes(x = locus, y = edit_distance)) +
geom_point() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$locus == 1,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_1_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$locus == 116,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_116_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$locus == 155,], aes(x = gen, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(locus)) +
ggsave('gen_faceted_by_locus_155_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_point() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_plot() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.pdf', units = 'in', width = 20, height = 500, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_250_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_500_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
###################################
####            FIT            ####
###################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data = read.csv('edit_distance_fit.csv')
data$locus = as.numeric(data$locus)
data$gen = as.numeric(data$gen)
data$edit_distance = as.numeric(data$edit_distance)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_1_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_250_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggsave('locus_faceted_by_gen_500_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 1') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_1_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 1') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_1_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 250') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_250_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 500') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_500_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 1') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_1_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 250') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_250_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 500') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_500_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
###################################
####            FIT            ####
###################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data = read.csv('edit_distance_fit.csv')
data$locus = as.numeric(data$locus)
data$gen = as.numeric(data$gen)
data$edit_distance = as.numeric(data$edit_distance)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 1') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_1_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 250') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_250_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 500') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_500_fit.png', units = 'in', width = 10, height = 2, limitsize = F)
###################################
####            FLAT           ####
###################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data = read.csv('edit_distance_flat.csv')
data$locus = as.numeric(data$locus)
data$gen = as.numeric(data$gen)
data$edit_distance = as.numeric(data$edit_distance)
ggplot(data[data$gen == 1,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 1') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_1_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 250,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 250') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_250_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
ggplot(data[data$gen == 500,], aes(x = locus, y = edit_distance)) +
geom_line() +
facet_grid(rows = vars(gen)) +
ggtitle('Generation 500') +
scale_y_continuous(limits = c(0,20)) +
ggsave('locus_faceted_by_gen_500_flat.png', units = 'in', width = 10, height = 2, limitsize = F)
############################################
rm(list = ls())
library(ggplot2)
setwd('~/documents/school/cur_sp20/multi_disciplinary_research/project/scripts/data/1')
data_fit = read.csv('edit_distance_fit.csv')
data_fit$locus = as.numeric(data_fit$locus)
data_fit$gen = as.numeric(data_fit$gen)
data_fit$edit_distance = as.numeric(data_fit$edit_distance)
data_flat = read.csv('edit_distance_flat.csv')
data_flat$locus = as.numeric(data_flat$locus)
data_flat$gen = as.numeric(data_flat$gen)
data_flat$edit_distance = as.numeric(data_flat$edit_distance)
num_gens = length(unique(data_fit$gen))
data_integral = data.frame(data = matrix(nrow = num_gens * 2, ncol = 4))
for(gen in 1:num_gens){
integral_fit = sum(data_fit[data_fit$gen == gen,]$edit_distance)
integral_flat = sum(data_flat[data_flat$gen == gen,]$edit_distance)
var_fit = var(data_fit[data_fit$gen == gen,]$edit_distance)
var_flat = var(data_flat[data_flat$gen == gen,]$edit_distance)
data_integral[gen,] = c(gen, integral_fit, 'fit', var_fit)
data_integral[gen + num_gens,] = c(gen, integral_flat, 'flat', var_flat)
}
colnames(data_integral) = c('gen', 'integral', 'landscape', 'var')
data_integral$gen = as.numeric(data_integral$gen)
data_integral$integral = as.numeric(data_integral$integral)
data_integral$var = as.numeric(data_integral$var)
ggplot(data_integral, aes(gen, integral, color = landscape)) +
geom_line()
ggplot(data_integral, aes(gen, var, color = landscape)) +
geom_line()
ggplot(data_integral, aes(gen, integral, color = landscape)) +
geom_line()
ggplot(data_integral, aes(gen, integral, color = landscape)) +
geom_line() +
ggsave('integral.png', units = 'in', width = 10, height = 4, limitsize = F)
ggplot(data_integral, aes(gen, integral, color = landscape)) +
geom_line() +
ylab('Area under the curve (sum of edit distance / loci)')
ggplot(data_integral, aes(gen, integral, color = landscape)) +
geom_line() +
ylab('Area under the curve (sum of edit distance / loci)') +
ggsave('integral.png', units = 'in', width = 10, height = 4, limitsize = F)
